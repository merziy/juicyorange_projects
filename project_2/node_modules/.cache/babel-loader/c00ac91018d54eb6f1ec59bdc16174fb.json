{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vue } from '../vue';\nimport { arrayIncludes } from '../utils/array';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_rootListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this;\n\n    // Unregister all registered listeners\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffRoot(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerRootListener: function registerRootListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterRootListener: function unregisterRootListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      if (this.$root) {\n        this.$root.$on(event, callback);\n        this.registerRootListener(event, callback);\n      }\n    },\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n      if (this.$root) {\n        var _callback = function _callback() {\n          _this2.unregisterRootListener(_callback); // eslint-disable-next-line node/no-callback-literal\n\n          callback.apply(void 0, arguments);\n        };\n        this.$root.$once(event, _callback);\n        this.registerRootListener(event, _callback);\n      }\n    },\n    /**\n     * Safely unregister event listeners from the root Vue node\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOffRoot: function listenOffRoot(event, callback) {\n      this.unregisterRootListener(event, callback);\n      if (this.$root) {\n        this.$root.$off(event, callback);\n      }\n    },\n    /**\n     * Convenience method for calling `vm.$emit()` on `$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      if (this.$root) {\n        var _this$$root;\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n      }\n    }\n  }\n});","map":{"version":3,"names":["Vue","arrayIncludes","keys","PROP","listenOnRootMixin","extend","created","beforeDestroy","_this","forEach","event","callback","listenOffRoot","methods","registerRootListener","push","unregisterRootListener","filter","cb","listenOnRoot","$root","$on","listenOnRootOnce","_this2","_callback","apply","arguments","$once","$off","emitOnRoot","_this$$root","_len","length","args","Array","_key","$emit","concat"],"sources":["/Users/alex/dev/juicyorange/project_2/matb-guessing-game_2/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"],"sourcesContent":["import { Vue } from '../vue';\nimport { arrayIncludes } from '../utils/array';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_rootListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this;\n\n    // Unregister all registered listeners\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffRoot(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerRootListener: function registerRootListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterRootListener: function unregisterRootListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      if (this.$root) {\n        this.$root.$on(event, callback);\n        this.registerRootListener(event, callback);\n      }\n    },\n\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      if (this.$root) {\n        var _callback = function _callback() {\n          _this2.unregisterRootListener(_callback); // eslint-disable-next-line node/no-callback-literal\n\n\n          callback.apply(void 0, arguments);\n        };\n\n        this.$root.$once(event, _callback);\n        this.registerRootListener(event, _callback);\n      }\n    },\n\n    /**\n     * Safely unregister event listeners from the root Vue node\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOffRoot: function listenOffRoot(event, callback) {\n      this.unregisterRootListener(event, callback);\n\n      if (this.$root) {\n        this.$root.$off(event, callback);\n      }\n    },\n\n    /**\n     * Convenience method for calling `vm.$emit()` on `$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      if (this.$root) {\n        var _this$$root;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n      }\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}